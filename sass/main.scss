@import "abstracts/functions";
@import "abstracts/mixins";
@import "abstracts/variables";

@import "base/animations";
@import "base/base";
@import "base/typography";
@import "base/utilities";

@import "components/bg-video";
@import "components/button";
@import "components/card";
@import "components/composition";
@import "components/feature-box";
@import "components/form";
@import "components/popup";
@import "components/story";

@import "layout/footer";
@import "layout/grid";
@import "layout/header";
@import "layout/navigation";

@import "pages/home";

    
    /*
        Za slike - https: //unsplash.com/
        Za video - https: //coverr.co/
    
        3 stupa za kreiranje web-stranica:
    
        1. Responzivni dizajn
            - danas je standard
            - fluidni layout
            - responzivne slike
            - pravilne jedinice veličina
            - Desktop first / Mobile first
        2. Održiv i skalabilan kod
            - čisti, jednostavan za razumijevanje kod
            - mogućnost razvoja i ponovnog korištenja istog koda
            - organiziranje klasa, imenovanje klasa
            - pravilna struktura HTML-a
        3. Web performanse
            - što manje HTTP requesta i koda
            - kompresija koda i korištenje CSS preprocesora ( Sass... )
            - manje slika / kompresija slika
    
    
        Način na koji se parsira CSS prilikom učitavanja web stranice:
    
        1. Učitava se HTML koji se zatim parsira te se iz njega kreira DOM ( Document Object Model )
        2. Tijekom parsiranja HTML-a pronalazi se CSS koje se također učitava te se parsira u dva glavna koraka:
            - razriješiti konfliktne CSS deklaracije ( cascade )
            - procesiranje finalnih CSS vrijednosti
           Nakon što je parsiranje završeno, kreira se CSSOM ( CSS Object Model )
        3. DOM i CSSOM formiraju Render tree
        4. Vizualno renderiranje i formatiranje modela na temelju koda
        5. Prikaz web stranice
    
    
        CASCADE
    
        - proces kombiniranja različitih stylesheetova i rješavanje konflikata između različitih css pravila i deklaracija
          kada se više od jednog pravila aplicira na pojedini element
        
        Tri vrste izvora CSS-a: 
        1. Autor - osoba koja je napisala CSS ( developer )
        2. User - osoba koja mijenja CSS u browseru kroz developers tools ( F12 )
        3. Browser ( user agent ) - defaultni css koji browser postavlja
    
        Cascade se rješava na temelju tri stvari: Važnosti ( Importance ), Specifičnosti ( Specificity ) i Redoslijed izvora ( Source order )
        Prvo se pokuša riješiti prema važnosti deklaracije, ako su deklaracije iste važnosti, prelazi se na specifičnost, no ako je specifičnost također jednaka onda se gleda redoslijed.
        Posljednja deklaracija u kodu će se uvijek primjeniti i overrideati ostale deklaracije.
    
        Redoslijed prema važnosti ( Importance ):
        1. User !important deklaracije
        2. Author !important deklaracije
        3. Author deklaracije
        4. User deklaracije
        5. Defaultne browser deklaracije
    
        Redoslijed prema specifičnosti ( Specificity ):
        1. Inline stilovi
        2. IDs
        3. Klase, pseudo-klase, atributi
        4. Elementi, pseudo-elementi
    
        Specifičnost se računa na temelju 4 znamenke, gdje svaka predstavlja pojedinu stvar na gore navedenoj listi.
        Npr:
    
        .nav a:link {
            color: red;
        }
    
        (0,0,2,1) - specifičnost je 21 pošto imamo klasu, pseudo-klasu i element
    
        
        PROCESIRANJE VRIJEDNOSTI
    
        <div class="section">
            <p class="amazing">CSS</p>
        </div>
    
        .section {
            font-size: 1.5rem;
            width: 280px;
            background-color: orangered;
        }
    
        p {
            width: 140px;
            background-color: green;
        }
    
        .amazing {
            width: 66%
        }
    
        Na temelju gore navedenog primjera u nastavku je objašnjeno procesiranje CSS vrijednosti kroz 6 koraka.
        Kao primjer uzeti će se width paragrapha ( p elementa ).
        1. Deklarirana vrijednost ( autor deklaracija ) - ovdje postoje dvije vrijednosti te se na temelju cascade-a uzima ona koja ima veću specifičnost ( važnost je ista jer je obje deklaracije napisao autor ),
                                                          a to je vrijednost od 66%
                                                        - 66%
        2. Cascaded vrijednost ( nakon cascade-a )      - 66%
        3. Specificirana vrijednost 
           ( defaultna, ako nema cascade vrijednosti )  - 66%
        4. Izračunata vrijednost 
           ( konverzija iz relativnih u apsolutne )     - 66%
        5. Korištena vrijednost ( finalna kalkukacija ) - 184.8px ( 66% od 280px )
        6. Stvarna vrijednost ( restrikcije )           - 185px
    
    
        KONVERTIRANJE VRIJEDNOSTI ( iz relativnih u apsolutne (px) )
    
        % ( font ) - množi se sa vrijednosti parent elementa za font-size
        % ( lengths ( width, height, padding, ... ) - množi se sa vrijednosti parent elementa za width
        em ( font ) - množi se sa vrijednosti parent elementa za font-size
        em ( lengths ) - množi se sa vrijednosti trenutnog elementa za font-size
        rem - množi se sa vrijednosti root vrijednosti
        vh - postotak viewport heighta ( ovisi o veličini ekrana )
        vw - postotak viewport widtha ( ovisi o veličini ekrana )
    
        NASLIJEĐIVANJE ( Inheritance )
    
        VISUAL FORMATTING MODEL
    
        - algoritam koji računa kutije ( boxes ) i određuje layout tih kutija, za svaki element u render tree-u, kako bi se odredio finalni layout stranice
    
        Faktori koji se uzimaju u obzir prilikom računanja su: 
        - Dimenzije kutije: box model
        - Vrsta kutije: inline, block ili inline-block
        - Shema pozicioniranja: floats i position ( absolute/relative )
        - Stacking contexts ( z-index )
        - Ostali elementi u render tree-u ( parent/sibling elementi )
        - Eksternalne informacije ( veličina viewporta ( ekrana ), dimenzije slika, ... )
    
        BOX MODEL
    
        BOX TYPES
    
        POSITIONING SCHEMA
    
        Node.js
    
        npm init ( naredba se pokrece na svakom novom projektu kako bi se kreira package.json file )
    
        npm install --save-dev sass ( instalirava se sass unutar projekta )
    
    */