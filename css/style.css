/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/*  Univerzalni selektor za resetiranje svih elemenata na stranici da nemaju margine i padding 
    ( razlog je što browser dodaje defaultne margine na elemente ), dodani i pseudo-elementi */
*,
*::after,
*::before {
    margin: 0;
    padding: 0;
    /* mijenja box model na način da border i padding više nisu pribrojani ukupnoj visini odnosno širini box modela, 
       vrijednost inherit forsira da svi elementi na web stranicu naslijede vrijednost iz body elementa */
    box-sizing: inherit;
}

html {
    /* root font-size, postotak je stavljen kako se defaultni browser font ne bi overrideao te user može mijenjati defaultni font */
    font-size: 62.5%;
}
body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    /* font-size: 16px; */
    line-height: 1.7;
    color: #777;
    padding: 3rem;
    box-sizing: border-box; 
}

.header {
    position: relative;
    height: 95vh; /* visina elementa će uvijek biti 95% veličine ekrana neovisno o veličini ekrana */
    background-image: linear-gradient(
                          to right bottom,
                        rgba(128, 214, 113, 0.8), 
                        rgba(40, 180, 133, 0.8)), 
                      url("../img/hero.jpg") ;
    background-size: cover; /* slike će se prilagoditi kako bi prekrila cijelu širinu elemeneta */
    background-position: top; /* gornji dio slike će uvijek ostati isti prilikom promjene veličine ekrana dok će donji dio izrezati ( cropped out ) */
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); /* omogućava nam kreiranje raznih oblika na principu koordinatnog sustava ( https://bennettfeely.com/clippy/ )  */
}

.header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem;
}

.header__logo {
    /* prilikom definiranja veličine slike, koristi se samo jedna od dimenzija dok će se druga prilagoditi */
    height: 3.5rem;
}

.header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    text-align: center;
    /* još jedan od načina za centriranje elementa, 
    element se ovdje pomiče u ovisnosti o samome sebi, a ne u ovisnosti o parent elementu */
    transform: translate(-50%, -50%);
}

.heading-primary {
    color: #fff;
    text-transform: uppercase;
    margin-bottom: 6rem;
}

.heading-primary--main {
    letter-spacing: 3.5rem;
    display: block;
    font-size: 6rem;
    font-weight: 400;

    animation-name: moveInLeft;
    animation-duration: 2s;
    animation-timing-function: ease-out;
}

.heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;

    animation-name: moveInRight;
    animation-duration: 2s;
    animation-timing-function: ease-out;
}

/*  prilikom kreiranja animacija, zbog performansi browsera ( tj. browseri su oprimizirani za ta dva propertya ), 
    najbolje je koristiti samo dva propertya: opacity i transform */
@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-10rem)
    }

    80% {
        transform: translateX(1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(10rem)
    }

    80% {
        transform: translateX(-1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translatey(3rem)
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}


.btn:link, /* pseudo klasa koja reprezentira element koji se još nije posjetio ( not visited )  */
.btn:visited /* pseudo klasa koja reprezentira element koji se je posjetio ( visited ) */ {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    transition: all .2s;
    position: relative;
    font-size: 1.6rem;
}

.btn:hover {
    transform: translateY(-.3rem);
    box-shadow: 0 1rem 2rem rgba(0,0,0,.2);
}

.btn:active {
    transform: translateY(-.1rem);
    box-shadow: 0 .5rem 1rem rgba(0, 0, 0, 0.2);
}

.btn--white {
    background-color: #fff;
    color: #777;
}

/*  dodaje se element nakon navedenog elementa, u ovome slučaju iza elementa ( z-index ),
    ::after se tretira kao child element */
.btn::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 100px;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s;
}

.btn--white::after {
    background-color: #fff;
}

.btn:hover::after {
    /* za povećavanje elementa */ 
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0;
}

.btn--animated {
    animation: moveInBottom .5s ease-out .75s;
    /* automatski postavlja stile na 0% animacije prije nego li je animacija počela */
    animation-fill-mode: backwards;
}

/*

    3 stupa za kreiranje web-stranica:

    1. Responzivni dizajn
        - danas je standard
        - fluidni layout
        - responzivne slike
        - pravilne jedinice veličina
        - Desktop first / Mobile first
    2. Održiv i skalabilan kod
        - čisti, jednostavan za razumijevanje kod
        - mogućnost razvoja i ponovnog korištenja istog koda
        - organiziranje klasa, imenovanje klasa
        - pravilna struktura HTML-a
    3. Web performanse
        - što manje HTTP requesta i koda
        - kompresija koda i korištenje CSS preprocesora ( Sass... )
        - manje slika / kompresija slika


    Način na koji se parsira CSS prilikom učitavanja web stranice:

    1. Učitava se HTML koji se zatim parsira te se iz njega kreira DOM ( Document Object Model )
    2. Tijekom parsiranja HTML-a pronalazi se CSS koje se također učitava te se parsira u dva glavna koraka:
        - razriješiti konfliktne CSS deklaracije ( cascade )
        - procesiranje finalnih CSS vrijednosti
       Nakon što je parsiranje završeno, kreira se CSSOM ( CSS Object Model )
    3. DOM i CSSOM formiraju Render tree
    4. Vizualno renderiranje i formatiranje modela na temelju koda
    5. Prikaz web stranice


    CASCADE

    - proces kombiniranja različitih stylesheetova i rješavanje konflikata između različitih css pravila i deklaracija
      kada se više od jednog pravila aplicira na pojedini element
    
    Tri vrste izvora CSS-a: 
    1. Autor - osoba koja je napisala CSS ( developer )
    2. User - osoba koja mijenja CSS u browseru kroz developers tools ( F12 )
    3. Browser ( user agent ) - defaultni css koji browser postavlja

    Cascade se rješava na temelju tri stvari: Važnosti ( Importance ), Specifičnosti ( Specificity ) i Redoslijed izvora ( Source order )
    Prvo se pokuša riješiti prema važnosti deklaracije, ako su deklaracije iste važnosti, prelazi se na specifičnost, no ako je specifičnost također jednaka onda se gleda redoslijed.
    Posljednja deklaracija u kodu će se uvijek primjeniti i overrideati ostale deklaracije.

    Redoslijed prema važnosti ( Importance ):
    1. User !important deklaracije
    2. Author !important deklaracije
    3. Author deklaracije
    4. User deklaracije
    5. Defaultne browser deklaracije

    Redoslijed prema specifičnosti ( Specificity ):
    1. Inline stilovi
    2. IDs
    3. Klase, pseudo-klase, atributi
    4. Elementi, pseudo-elementi

    Specifičnost se računa na temelju 4 znamenke, gdje svaka predstavlja pojedinu stvar na gore navedenoj listi.
    Npr:

    .nav a:link {
        color: red;
    }

    (0,0,2,1) - specifičnost je 21 pošto imamo klasu, pseudo-klasu i element

    
    PROCESIRANJE VRIJEDNOSTI

    <div class="section">
        <p class="amazing">CSS</p>
    </div>

    .section {
        font-size: 1.5rem;
        width: 280px;
        background-color: orangered;
    }

    p {
        width: 140px;
        background-color: green;
    }

    .amazing {
        width: 66%
    }

    Na temelju gore navedenog primjera u nastavku je objašnjeno procesiranje CSS vrijednosti kroz 6 koraka.
    Kao primjer uzeti će se width paragrapha ( p elementa ).
    1. Deklarirana vrijednost ( autor deklaracija ) - ovdje postoje dvije vrijednosti te se na temelju cascade-a uzima ona koja ima veću specifičnost ( važnost je ista jer je obje deklaracije napisao autor ),
                                                      a to je vrijednost od 66%
                                                    - 66%
    2. Cascaded vrijednost ( nakon cascade-a )      - 66%
    3. Specificirana vrijednost 
       ( defaultna, ako nema cascade vrijednosti )  - 66%
    4. Izračunata vrijednost 
       ( konverzija iz relativnih u apsolutne )     - 66%
    5. Korištena vrijednost ( finalna kalkukacija ) - 184.8px ( 66% od 280px )
    6. Stvarna vrijednost ( restrikcije )           - 185px


    KONVERTIRANJE VRIJEDNOSTI ( iz relativnih u apsolutne (px) )

    % ( font ) - množi se sa vrijednosti parent elementa za font-size
    % ( lengths ( width, height, padding, ... ) - množi se sa vrijednosti parent elementa za width
    em ( font ) - množi se sa vrijednosti parent elementa za font-size
    em ( lengths ) - množi se sa vrijednosti trenutnog elementa za font-size
    rem - množi se sa vrijednosti root vrijednosti
    vh - postotak viewport heighta ( ovisi o veličini ekrana )
    vw - postotak viewport widtha ( ovisi o veličini ekrana )

    NASLIJEĐIVANJE ( Inheritance )

    VISUAL FORMATTING MODEL

    - algoritam koji računa kutije ( boxes ) i određuje layout tih kutija, za svaki element u render tree-u, kako bi se odredio finalni layout stranice

    Faktori koji se uzimaju u obzir prilikom računanja su: 
    - Dimenzije kutije: box model
    - Vrsta kutije: inline, block ili inline-block
    - Shema pozicioniranja: floats i position ( absolute/relative )
    - Stacking contexts ( z-index )
    - Ostali elementi u render tree-u ( parent/sibling elementi )
    - Eksternalne informacije ( veličina viewporta ( ekrana ), dimenzije slika, ... )

    BOX MODEL

    BOX TYPES

    POSITIONING SCHEMA

    Node.js

    npm init ( naredba se pokrece na svakom novom projektu kako bi se kreira package.json file )

    npm install --save-dev sass ( instalirava se sass unutar projekta )

    npm run compile:sass ( komanda za pokretanje npm skripte koja je napisana u package.json folderu )

    "compile:sass": "sass sass/main.scss css/main.css -w" ( skripta koja se upisuje u package.json kojom scss promatra promjene u file i automatski ih compajlira )

    npm install -g live-server ( instalia live-server globalno, tj- može se koristiti na bilo kojem mjestu na PC-u )


    7-1 Arhitektura

    fileovi koji pocinju sa _ ( underscorom ) su "partial fileovi" koji se importiraju u main.scss file

    [class^="col-"] - oznacava sve klase koje pocinju sa "col-"
    [class$="col-"] - oznacava sve klase koje zavrsavaju sa "col-"
    [class*="col-"] - oznacava sve klase koje u sebi sadrze "col-"

*/